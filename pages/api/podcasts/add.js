const AWS = require('aws-sdk');
const s3 = new AWS.S3();


const TITLE = 'kitdesai custom podcasts'
const LINK = 'https://kitdesai.com'
const DESCRIPTION = 'Random podcasts generated by AI'

const generateRssFeed = (podcast) => {
  const rssHeader = `<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0">
<channel>
<title>${podcast.title}</title>
<link>${podcast.link}</link>
<description>${podcast.description}</description>
<language>${podcast.language || 'en-us'}</language>`;

  const rssItems = podcast.episodes.map(episode => `
<item>
  <title>${episode.title}</title>
  <description>${episode.description}</description>
  <pubDate>${new Date(episode.pubDate).toUTCString()}</pubDate>
  <enclosure url="${episode.url}" type="audio/mpeg" />
  <guid>${episode.guid}</guid>
</item>`).join('');

  const rssFooter = `
</channel>
</rss>`;

  return rssHeader + rssItems + rssFooter;
};

export default async function handler(req, res) {
  if (req.method !== 'POST') {
    return res.status(405).json({ message: 'Method not allowed' });
  }

  try {
    const { title, description, url, pubDate } = req.body;

    if (!title || !description || !url) {
      return res.status(400).json({ message: 'Missing required fields' });
    }

    const baseUrl = process.env.BASE_URL || 'http://localhost:3000';
    const response = await fetch(`${baseUrl}/api/podcasts`);
    const existingPodcasts = await response.json();

    const updatedPodcasts = [
      ...existingPodcasts.podcasts,
      { title, description, url, pubDate, guid: url }
    ];

    const rss = generateRssFeed({
      title: TITLE,
      link: LINK,
      description: DESCRIPTION,
      episodes: updatedPodcasts
    })

    const uploadParams = {
      Bucket: 'kitdesai-podcasts',
      Key: 'podcast.rss',
      Body: rss,
      ContentType: 'application/rss+xml',
      ACL: 'public-read' // Ensure the file is publicly readable
    };

    try {
      await s3.putObject(uploadParams).promise();
    } catch (err) {
      console.warn('unable to upload rss file', err)
    }

    return res.status(200).json({ podcasts: updatedPodcasts });
  } catch (error) {
    console.error('Error adding podcast:', error);
    return res.status(500).json({ message: 'Internal server error' });
  }
}
